/*The MIT License (MIT)

Copyright (c) 2014 Cory Beams

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.*/

function scale(t,i){var e={x:i.x*t,y:i.y*t};return e}function Light(t,i,e,r,s,h,o,n,a,g){this.location={x:t,y:i},this.rotation=e,this.angleRange=g,this.radius=a,this.type=r,this.bufferIndex,this.red=s,this.green=h,this.blue=o,this.intensity=n,this.extendedLightMode=!1,this.lightIsOnAPolygon=!1,this.polygonIndex,this.setPosition=function(t,i){(this.location.x!=t||this.location.y!=i)&&(this.location.x=t,this.location.y=i)},this.setRotation=function(t){this.rotation=t},this.setRadius=function(t){"point"==this.type||"directional"==this.type?console.log("Note: Setting the radius of a point or directional light will not affect it."):this.radius=t},this.setColour=function(t,i,e){this.red=t,this.green=i,this.blue=e},this.setIntensity=function(t){this.intensity=t},this.setExtendedLightMode=function(t){this.extendedLightMode=t}}function Polygon(t,i,e,r,s,h,o){this.x=t,this.y=i,this.rotation=0,this.rotationPoint={x:0,y:0},this.faceSize=e,this.vertices=r,this.shadowVertices=s,this.colour=o,this.bufferIndex,this.textureURL=h,this.textureIndex,this.rotationCalc=!1,this.dontRender=!1,this.getVertices=function(){return this.shadowVertices},this.setPosition=function(t,i){(this.x!=t||this.y!=i)&&(this.x=t,this.y=i,this.rotationCalc=!0)},this.setRotation=function(t){this.rotation!=t&&(this.rotation=t,this.rotationCalc=!0)},this.setRotationPoint=function(t,i){this.rotationPoint={x:t,y:i},this.rotationCalc=!0},this.calculateRotation=function(){for(var t=degToRad(this.rotation),i=0;i<s.length;i++){var e=this.x+this.vertices[i].x,r=this.y+this.vertices[i].y,h=this.rotationPoint.x,o=this.rotationPoint.y,n=Math.cos(t)*(e-h)-Math.sin(t)*(r-o)+h,a=Math.sin(t)*(e-h)+Math.cos(t)*(r-o)+o;this.shadowVertices[i].x=n,this.shadowVertices[i].y=a}this.rotationCalc=!1}}function LightingEngine(t){this.gl,this.canvas=t,this.mvMatrix=mat4.create(),this.pMatrix=mat4.create(),this.mvMatrixStack=[],this.xOffset=0,this.yOffset=0,this.currentProgram,this.shaderProgram,this.shaderProgram2,this.pointLightShaderProgram2,this.spotLightShaderProgram,this.textureShaderProgram,this.pointLightShaderSelected=!0,this.foreground=[],this.background=[],this.ambientLight={r:255,g:255,b:255,a:255},this.lights=[],this.lightColour={r:255,g:255,b:255},this.lightIntensity=40,this.colourSpectrum=[],this.colourIndex=0,this.objectBuffers=[],this.objectColourBuffers=[],this.objectTextureBuffers=[],this.lightBuffers=[],this.shadowBuffers=[],this.shadowColourBuffers=[],this.textures=[],this.time=(new Date).getTime(),this.fpsCount=0,this.fps=0,this.logFPS=!1,this.initialized=!1,this.foregroundBlending=!1,this.convertCallsPerFrame=0,this.init=function(){this.initGL(),this.initShaders(),this.initBuffers(),this.initTextures(),this.prepareGL(),this.initialized=!0},this.initGL=function(){try{this.gl=this.canvas.getContext("webgl",{stencil:!0}),this.gl.viewportWidth=t.width,this.gl.viewportHeight=t.height,this.gl.viewportRatio=t.width/t.height}catch(i){}this.gl||alert("Could not initialise WebGL, sorry :-( ")},this.initShaders=function(){var t=this.getShaderFromVar(this.gl,pointLightFragShader,"Frag"),i=this.getShaderFromVar(this.gl,pointLightFragShader2,"Frag"),e=this.getShaderFromVar(this.gl,mainVertShader,"Vert"),r=this.getShaderFromVar(this.gl,spotLightFragShader,"Frag"),s=this.getShaderFromVar(this.gl,colourFragShader,"Frag"),h=this.getShaderFromVar(this.gl,textureFragShader,"Frag"),o=this.getShaderFromVar(this.gl,textureVertShader,"Vert");this.shaderProgram=this.createShader(this.shaderProgram,!1,e,t),this.pointLightShaderProgram2=this.createShader(this.shaderProgram,!1,e,i),this.shaderProgram2=this.createShader(this.shaderProgram2,!1,e,s),this.spotLightShaderProgram=this.createShader(this.spotLightShaderProgram,!1,e,r),this.textureShaderProgram=this.createShader(this.textureShaderProgram,!0,o,h),this.setCurrentShaderProgram(this.shaderProgram)},this.initBuffers=function(){for(var t=0;t<this.foreground.length;t++)this.initPolygonBuffer(this.foreground,t);for(var i=0;i<this.background.length;i++)this.initPolygonBuffer(this.background,i);this.shadowColourBuffers[0]=this.gl.createBuffer(),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.shadowColourBuffers[0]),colors=[];for(var e=0;1e4>e;e++)colors=colors.concat([1,1,1,.5]);this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array(colors),this.gl.STATIC_DRAW),this.shadowColourBuffers[0].itemSize=4,this.shadowColourBuffers[0].numItems=1e4,this.shadowBuffers[0]=this.gl.createBuffer();for(var r=0;r<this.lights.length;r++)this.initLightBuffer(this.lights,r)},this.initPolygonBuffer=function(t,i){for(var e=i;e>=0;e--)if(t[i]!=t[e]&&t[i].vertices.length==t[e].vertices.length&&t[i].faceSize==t[e].faceSize&&t[i].colour.r==t[e].colour.r&&t[i].colour.g==t[e].colour.g&&t[i].colour.b==t[e].colour.b&&t[i].colour.a==t[e].colour.a)t[i].bufferIndex=t[e].bufferIndex;else if(0==e){t[i].bufferIndex=this.objectBuffers.length,this.objectBuffers[this.objectBuffers.length]=this.gl.createBuffer(),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.objectBuffers[t[i].bufferIndex]);var r=[];if(null!=t[i].textureURL)r=[this.convertToMatrix(t[i].faceSize,!0),this.convertToMatrix(t[i].faceSize,!1),0,0,this.convertToMatrix(t[i].faceSize,!1),0,this.convertToMatrix(t[i].faceSize,!0),0,0,0,0,0],this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array(r),this.gl.STATIC_DRAW);else{for(var s=0;s<t[i].vertices.length;s++)r.push(this.convertToMatrix(t[i].vertices[s].x,!0),this.convertToMatrix(t[i].vertices[s].y,!1),0),s%3==1&&r.push(0,0,0);for(var h=[7,10,13,16,19,22,25,28,31,34,37,40,43,46,49,52],o=0;o<h.length;o++)if(t[i].vertices.length==h[o]){r.push(0,0,0);break}r.push(this.convertToMatrix(t[i].vertices[0].x,!0)),r.push(this.convertToMatrix(t[i].vertices[0].y,!1)),r.push(0),this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array(r),this.gl.STATIC_DRAW)}if(this.objectBuffers[t[i].bufferIndex].itemSize=3,this.objectBuffers[t[i].bufferIndex].numItems=r.length/3,null==t[i].textureURL){this.objectColourBuffers[t[i].bufferIndex]=this.gl.createBuffer(),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.objectColourBuffers[t[i].bufferIndex]),colors=[];for(var n=0;n<r.length;n++)colors=colors.concat([t[i].colour.r/255,t[i].colour.g/255,t[i].colour.b/255,t[i].colour.a/255]);this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array(colors),this.gl.STATIC_DRAW),this.objectColourBuffers[t[i].bufferIndex].itemSize=4,this.objectColourBuffers[t[i].bufferIndex].numItems=r.length/3}else{this.objectTextureBuffers[t[i].bufferIndex]=this.gl.createBuffer(),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.objectTextureBuffers[t[i].bufferIndex]);var a=[1,1,0,1,1,0,0,0];this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array(a),this.gl.STATIC_DRAW),this.objectTextureBuffers[t[i].bufferIndex].itemSize=2,this.objectTextureBuffers[t[i].bufferIndex].numItems=4}}},this.initTextures=function(){for(var t=0;t<this.foreground.length;t++)null!=this.foreground[t].textureURL&&this.assignTextureIndices(this.foreground,t);for(var i=0;i<this.background.length;i++)null!=this.background[i].textureURL&&this.assignTextureIndices(this.background,i)},this.assignTextureIndices=function(t,i){for(var e=this,r=!0,s=0;s<this.textures.length;s++){var h=this.gl.createTexture();if(h.image=new Image,h.image.src=t[i].textureURL,h.image.src==this.textures[s].image.src){t[i].textureIndex=s,r=!1;break}}if(1==r){var o=this.gl.createTexture();this.textures.push(o),this.textures[this.textures.length-1].image=new Image,this.textures[this.textures.length-1].image.onload=function(){for(var t=0;t<e.textures.length;t++)if(0==e.textures[t].hasLoaded){e.handleLoadedTexture(e.textures[t]);break}},this.textures[this.textures.length-1].image.src=t[i].textureURL,this.textures[this.textures.length-1].hasLoaded=!1,t[i].textureIndex=this.textures.length-1}},this.handleLoadedTexture=function(t){this.gl.bindTexture(this.gl.TEXTURE_2D,t),this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL,!0),this.gl.texImage2D(this.gl.TEXTURE_2D,0,this.gl.RGBA,this.gl.RGBA,this.gl.UNSIGNED_BYTE,t.image),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.NEAREST),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.NEAREST),this.gl.generateMipmap(this.gl.TEXTURE_2D),this.gl.bindTexture(this.gl.TEXTURE_2D,null),t.hasLoaded=!0},this.initLightBuffer=function(t,i){for(var e=i;e>=0;e--)if(t[i]!=t[e]&&t[i].type==t[e].type)t[i].bufferIndex=t[e].bufferIndex;else if(0==e)if(t[i].bufferIndex=this.lightBuffers.length,this.lightBuffers[this.lightBuffers.length]=this.gl.createBuffer(),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.lightBuffers[t[i].bufferIndex]),"point"==t[i].type||"spot"==t[i].type)vertices=[this.convertToMatrix(5*this.gl.viewportWidth,!0),this.convertToMatrix(5*this.gl.viewportHeight,!1),0,this.convertToMatrix(5*-this.gl.viewportWidth,!0),this.convertToMatrix(5*this.gl.viewportHeight,!1),0,this.convertToMatrix(5*this.gl.viewportWidth,!0),this.convertToMatrix(5*-this.gl.viewportHeight,!1),0,this.convertToMatrix(5*-this.gl.viewportWidth,!0),this.convertToMatrix(5*-this.gl.viewportHeight,!1),0],this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array(vertices),this.gl.DYNAMIC_DRAW),this.lightBuffers[t[i].bufferIndex].itemSize=3,this.lightBuffers[t[i].bufferIndex].numItems=4;else if("directional"==t[i].type){var r=t[i].angleRange,s=degToRad(r/2),h=2e5,o=Math.round(0+h*Math.cos(s)),n=Math.round(0+h*Math.sin(s));s=degToRad(-r/2);var a=Math.round(0+h*Math.cos(s)),g=Math.round(0+h*Math.sin(s));vertices=[0,0,0,this.convertToMatrix(o,!0),this.convertToMatrix(n,!1),0,this.convertToMatrix(a,!0),this.convertToMatrix(g,!1),0],this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array(vertices),this.gl.DYNAMIC_DRAW),this.lightBuffers[t[i].bufferIndex].itemSize=3,this.lightBuffers[t[i].bufferIndex].numItems=3}},this.prepareGL=function(){this.gl.clearColor(0,0,0,1),this.gl.viewport(0,0,this.gl.viewportWidth,this.gl.viewportHeight),mat4.ortho(this.pMatrix,-this.gl.viewportRatio,this.gl.viewportRatio,-1,1,.1,100),mat4.identity(this.mvMatrix),mat4.translate(this.mvMatrix,this.mvMatrix,[-this.gl.viewportRatio,-1,-1]),this.gl.enable(this.gl.DEPTH_TEST),this.gl.enable(this.gl.STENCIL_TEST)},this.setClearColour=function(t,i,e,r){this.gl.clearColor(t/255,i/255,e/255,r/255)},this.setMatrixUniforms=function(t){this.gl.uniformMatrix4fv(t.pMatrixUniform,!1,this.pMatrix),this.gl.uniformMatrix4fv(t.mvMatrixUniform,!1,this.mvMatrix)},this.update=function(){this.fpsCount++,(new Date).getTime()>this.time+1e3&&(this.time+=1e3,this.fps=this.fpsCount,this.fpsCount=0,1==this.logFPS&&(console.log("FPS: "+this.fps),console.log("----------------"))),this.convertCallsPerFrame=0;for(var t=0;t<this.lights.length;t++)if(0==this.lights[t].extendedLightMode){for(var i=0;i<this.foreground.length;i++)if(checkScreenBounds(this.xOffset,this.yOffset,this.gl.viewportWidth,this.gl.viewportHeight,500,500,this.foreground[i].x,this.foreground[i].y)){for(var e=this.foreground[i].shadowVertices.length,r=[],s=[],h=0;e>h;h++)r.push(this.foreground[i].shadowVertices[h].x),s.push(this.foreground[i].shadowVertices[h].y);var o=this.lights[t].location.x,n=this.lights[t].location.y,a=polygonCollision(e,r,s,o,n);if(1==a){this.lights[t].lightIsOnAPolygon=!0,this.lights[t].polygonIndex=i;break}this.lights[t].lightIsOnAPolygon=!1,this.lights[t].polygonIndex=null}}else this.lights[t].lightIsOnAPolygon=!1;for(var i=0;i<this.foreground.length;i++)checkScreenBounds(this.xOffset,this.yOffset,this.gl.viewportWidth,this.gl.viewportHeight,500,500,this.foreground[i].x,this.foreground[i].y)&&1==this.foreground[i].rotationCalc&&this.foreground[i].calculateRotation();for(var g=0;g<this.background.length;g++)checkScreenBounds(this.xOffset,this.yOffset,this.gl.viewportWidth,this.gl.viewportHeight,500,500,this.background[g].x,this.background[g].y)&&1==this.background[g].rotationCalc&&this.background[g].calculateRotation()},this.render=function(){this.gl.clear(this.gl.COLOR_BUFFER_BIT|this.gl.DEPTH_BUFFER_BIT),mat4.translate(this.mvMatrix,this.mvMatrix,[this.convertToMatrix(-this.xOffset,!0),this.convertToMatrix(-this.yOffset,!1),0]);for(var t=0;t<this.background.length;t++)checkScreenBounds(this.xOffset-this.background[t].faceSize*this.background[t].vertices.length,this.yOffset-this.background[t].faceSize*this.background[t].vertices.length,this.gl.viewportWidth+this.background[t].faceSize*this.background[t].vertices.length,this.gl.viewportHeight+this.background[t].faceSize*this.background[t].vertices.length,500,500,this.background[t].x,this.background[t].y)&&this.renderObject(this.background,t);this.gl.bindTexture(this.gl.TEXTURE_2D,null);for(var i=0;i<this.foreground.length;i++)checkScreenBounds(this.xOffset-this.foreground[i].faceSize*this.foreground[i].vertices.length,this.yOffset-this.foreground[i].faceSize*this.foreground[i].vertices.length,this.gl.viewportWidth+this.foreground[i].faceSize*this.foreground[i].vertices.length,this.gl.viewportHeight+this.foreground[i].faceSize*this.foreground[i].vertices.length,500,500,this.foreground[i].x,this.foreground[i].y)&&this.renderObject(this.foreground,i);this.gl.bindTexture(this.gl.TEXTURE_2D,null),this.setCurrentShaderProgram(1==this.pointLightShaderSelected?this.shaderProgram:this.pointLightShaderProgram2),this.gl.enable(this.gl.STENCIL_TEST),this.gl.depthMask(!1);for(var e=0;e<this.lights.length;e++){var r=[];this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.REPLACE),this.gl.stencilFunc(this.gl.ALWAYS,1,1),this.gl.colorMask(!1,!1,!1,!1);var s=0;if(null!=this.lights[e].polygonIndex&&(s=this.lights[e].polygonIndex),checkScreenBounds(this.xOffset,this.yOffset,this.gl.viewportWidth,this.gl.viewportHeight,500,500,this.lights[e].location.x,this.lights[e].location.y)){for(var i=s;i<this.foreground.length&&!(i>s&&null!=this.lights[e].polygonIndex);i++)if(0==this.foreground[i].dontRender){var h,o,n,a,g;if("spot"==this.lights[e].type?(h=this.lights[e].radius,o=1,n=this.lights[e].location.x-(this.foreground[i].x+this.foreground[i].faceSize/2),n*=n,a=this.lights[e].location.y-(this.foreground[i].y+this.foreground[i].faceSize/2),a*=a,g=Math.sqrt(n+a)):(h=1,o=1,g=1),h+o>g)for(var l=this.foreground[i].getVertices(),u=0;u<l.length;u++){var f=l[u],c=l[(u+1)%l.length],d=Vector2f.sub(c,f),x={x:d.y,y:-d.x};0==this.lights[e].extendedLightMode&&(1==this.lights[e].lightIsOnAPolygon?(x.x=-d.y,x.y=d.x):(x.x=d.y,x.y=-d.x));var m=Vector2f.sub(f,this.lights[e].location);if(Vector2f.dot(x,m)>0){var v=Vector2f.add(f,scale(500,Vector2f.sub(f,this.lights[e].location))),b=Vector2f.add(c,scale(500,Vector2f.sub(c,this.lights[e].location)));r.push(v.x/this.gl.viewportWidth*this.gl.viewportRatio*2,v.y/this.gl.viewportHeight*2,0,f.x/this.gl.viewportWidth*this.gl.viewportRatio*2,f.y/this.gl.viewportHeight*2,0,b.x/this.gl.viewportWidth*this.gl.viewportRatio*2,b.y/this.gl.viewportHeight*2,0,f.x/this.gl.viewportWidth*this.gl.viewportRatio*2,f.y/this.gl.viewportHeight*2,0,b.x/this.gl.viewportWidth*this.gl.viewportRatio*2,b.y/this.gl.viewportHeight*2,0,c.x/this.gl.viewportWidth*this.gl.viewportRatio*2,c.y/this.gl.viewportHeight*2,0)}}}this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.shadowBuffers[0]),this.gl.bufferData(this.gl.ARRAY_BUFFER,new Float32Array(r),this.gl.DYNAMIC_DRAW),this.shadowBuffers[0].itemSize=3,this.shadowBuffers[0].numItems=r.length/3,this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.shadowBuffers[0]),this.gl.vertexAttribPointer(this.currentProgram.vertexPositionAttribute,this.shadowBuffers[0].itemSize,this.gl.FLOAT,!1,0,0),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.shadowColourBuffers[0]),this.gl.vertexAttribPointer(this.currentProgram.vertexColorAttribute,this.shadowColourBuffers[0].itemSize,this.gl.FLOAT,!1,0,0),this.setMatrixUniforms(this.currentProgram),this.gl.drawArrays(this.gl.TRIANGLES,0,this.shadowBuffers[0].numItems)}if(this.gl.colorMask(!0,!0,!0,!0),checkScreenBounds(this.xOffset,this.yOffset,this.gl.viewportWidth,this.gl.viewportHeight,500,500,this.lights[e].location.x,this.lights[e].location.y)){this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP),this.gl.stencilFunc(this.gl.EQUAL,0,1),"point"==this.lights[e].type||"directional"==this.lights[e].type?this.setCurrentShaderProgram(1==this.pointLightShaderSelected?this.shaderProgram:this.pointLightShaderProgram2):"spot"==this.lights[e].type&&this.setCurrentShaderProgram(this.spotLightShaderProgram),this.gl.enable(this.gl.BLEND),this.gl.blendFunc(this.gl.ONE,this.gl.ONE),this.gl.uniform2f(this.gl.getUniformLocation(this.currentProgram,"lightLocation"),this.lights[e].location.x-this.xOffset,this.lights[e].location.y-this.yOffset),this.gl.uniform3f(this.gl.getUniformLocation(this.currentProgram,"lightColor"),this.lights[e].red/this.lights[e].intensity,this.lights[e].green/this.lights[e].intensity,this.lights[e].blue/this.lights[e].intensity),null!=this.lights[e].radius&&this.gl.uniform1f(this.gl.getUniformLocation(this.currentProgram,"radius"),this.lights[e].radius),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.lightBuffers[this.lights[e].bufferIndex]),this.gl.vertexAttribPointer(this.currentProgram.vertexPositionAttribute,this.lightBuffers[this.lights[e].bufferIndex].itemSize,this.gl.FLOAT,!1,0,0);var p=this.convertVertToMatrix(this.lights[e].location.x,this.lights[e].location.y);mat4.translate(this.mvMatrix,this.mvMatrix,[p.x,p.y,0]),this.mvPushMatrix(),mat4.rotate(this.mvMatrix,this.mvMatrix,degToRad(this.lights[e].rotation),[0,0,1]),this.setMatrixUniforms(this.currentProgram),this.gl.drawArrays(this.gl.TRIANGLE_STRIP,0,this.lightBuffers[this.lights[e].bufferIndex].numItems),this.mvPopMatrix(),mat4.translate(this.mvMatrix,this.mvMatrix,[-p.x,-p.y,0]),this.gl.disable(this.gl.BLEND),this.gl.clear(this.gl.STENCIL_BUFFER_BIT)}}if(1==this.foregroundBlending){for(var e=0;e<this.lights.length;e++){"point"==this.lights[e].type||"directional"==this.lights[e].type?this.setCurrentShaderProgram(1==this.pointLightShaderSelected?this.shaderProgram:this.pointLightShaderProgram2):"spot"==this.lights[e].type&&this.setCurrentShaderProgram(this.spotLightShaderProgram),this.gl.uniform2f(this.gl.getUniformLocation(this.currentProgram,"lightLocation"),this.lights[e].location.x-this.xOffset,this.lights[e].location.y-this.yOffset),this.gl.uniform3f(this.gl.getUniformLocation(this.currentProgram,"lightColor"),this.lights[e].red/this.lights[e].intensity,this.lights[e].green/this.lights[e].intensity,this.lights[e].blue/this.lights[e].intensity),null!=this.lights[e].radius&&this.gl.uniform1f(this.gl.getUniformLocation(this.currentProgram,"radius"),this.lights[e].radius),this.gl.enable(this.gl.BLEND),this.gl.blendFunc(this.gl.ONE,this.gl.ONE),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.lightBuffers[this.lights[e].bufferIndex]),this.gl.vertexAttribPointer(this.currentProgram.vertexPositionAttribute,this.lightBuffers[this.lights[e].bufferIndex].itemSize,this.gl.FLOAT,!1,0,0);var p=this.convertVertToMatrix(this.lights[e].location.x,this.lights[e].location.y);mat4.translate(this.mvMatrix,this.mvMatrix,[p.x,p.y,0]),this.mvPushMatrix(),mat4.rotate(this.mvMatrix,this.mvMatrix,degToRad(this.lights[e].rotation),[0,0,1]),this.setMatrixUniforms(this.currentProgram),this.gl.drawArrays(this.gl.TRIANGLE_STRIP,0,this.lightBuffers[this.lights[e].bufferIndex].numItems),this.mvPopMatrix(),mat4.translate(this.mvMatrix,this.mvMatrix,[-p.x,-p.y,0])}this.gl.disable(this.gl.BLEND)}mat4.translate(this.mvMatrix,this.mvMatrix,[this.convertToMatrix(this.xOffset,!0),this.convertToMatrix(this.yOffset,!1),0])},this.renderObject=function(t,i){if(0==t[i].dontRender){if(this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.objectBuffers[t[i].bufferIndex]),this.gl.vertexAttribPointer(this.currentProgram.vertexPositionAttribute,this.objectBuffers[t[i].bufferIndex].itemSize,this.gl.FLOAT,!1,0,0),null==t[i].textureURL){this.setCurrentShaderProgram(this.shaderProgram2),this.gl.uniform4f(this.gl.getUniformLocation(this.currentProgram,"ambientLight"),this.ambientLight.r/255,this.ambientLight.g/255,this.ambientLight.b/255,this.ambientLight.a/255),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.objectColourBuffers[t[i].bufferIndex]),this.gl.vertexAttribPointer(this.shaderProgram.vertexColorAttribute,this.objectColourBuffers[t[i].bufferIndex].itemSize,this.gl.FLOAT,!1,0,0);var e=this.convertVertToMatrix(t[i].x,t[i].y),r=this.convertToMatrix(t[i].rotationPoint.x-t[i].x,!0),s=this.convertToMatrix(t[i].rotationPoint.y-t[i].y,!1);mat4.translate(this.mvMatrix,this.mvMatrix,[e.x,e.y,0]),this.mvPushMatrix(),mat4.translate(this.mvMatrix,this.mvMatrix,[r,s,0]),mat4.rotate(this.mvMatrix,this.mvMatrix,degToRad(t[i].rotation),[0,0,1]),mat4.translate(this.mvMatrix,this.mvMatrix,[-r,-s,0]),this.setMatrixUniforms(this.shaderProgram2)}else{this.gl.blendFunc(this.gl.SRC_ALPHA,this.gl.ONE_MINUS_SRC_ALPHA),this.gl.enable(this.gl.BLEND),this.setCurrentShaderProgram(this.textureShaderProgram),this.gl.uniform4f(this.gl.getUniformLocation(this.currentProgram,"ambientLight"),this.ambientLight.r/255,this.ambientLight.g/255,this.ambientLight.b/255,this.ambientLight.a/255),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.objectTextureBuffers[t[i].bufferIndex]),this.gl.vertexAttribPointer(this.currentProgram.textureCoordAttribute,this.objectTextureBuffers[t[i].bufferIndex].itemSize,this.gl.FLOAT,!1,0,0),this.gl.activeTexture(this.gl.TEXTURE0),this.gl.bindTexture(this.gl.TEXTURE_2D,this.textures[t[i].textureIndex]),this.gl.uniform1i(this.textureShaderProgram.samplerUniform,0);var e=this.convertVertToMatrix(t[i].x,t[i].y),r=this.convertToMatrix(t[i].rotationPoint.x-t[i].x,!0),s=this.convertToMatrix(t[i].rotationPoint.y-t[i].y,!1);mat4.translate(this.mvMatrix,this.mvMatrix,[e.x,e.y,0]),this.mvPushMatrix(),mat4.translate(this.mvMatrix,this.mvMatrix,[r,s,0]),mat4.rotate(this.mvMatrix,this.mvMatrix,degToRad(t[i].rotation),[0,0,1]),mat4.translate(this.mvMatrix,this.mvMatrix,[-r,-s,0]),this.setMatrixUniforms(this.textureShaderProgram)}this.gl.drawArrays(this.gl.TRIANGLE_STRIP,0,this.objectBuffers[t[i].bufferIndex].numItems),this.mvPopMatrix(),mat4.translate(this.mvMatrix,this.mvMatrix,[-e.x,-e.y,0]),this.gl.disable(this.gl.BLEND)}},this.setCurrentShaderProgram=function(t){this.gl.useProgram(t),this.currentProgram=t},this.moveCamera=function(t,i){this.xOffset=t,this.yOffset=i},this.createPolygon=function(t,i,e,r,s,h){if(3>e)console.log("Error: To create a polygon it must have at least 3 vertices!");else if(e>52)console.log("Error: Currently only support polygons with up to 52 vertices.");else{for(var o=[],n=0;e>n;n++)o.push({x:Math.sin(n/e*2*Math.PI)*r,y:Math.cos(n/e*2*Math.PI)*r});for(var a=[],n=0;e>n;n++)a.push({x:Math.sin(n/e*2*Math.PI)*r+t,y:Math.cos(n/e*2*Math.PI)*r+i});1==h?this.foreground.push(new Polygon(t,i,r,o,a,null,s)):0==h&&this.background.push(new Polygon(t,i,r,o,a,null,s)),1==this.initialized&&(1==h?this.initPolygonBuffer(this.foreground,this.foreground.length-1):0==h&&this.initPolygonBuffer(this.background,this.background.length-1))}},this.createSquare=function(t,i,e,r,s){null==s&&(s=!1);var h=[{x:0,y:0},{x:0,y:e},{x:e,y:e},{x:e,y:0}],o=[{x:t,y:i},{x:t,y:e+i},{x:e+t,y:e+i},{x:e+t,y:i}],n={r:null,g:null,b:null,a:null};1==s?this.foreground.push(new Polygon(t,i,e,h,o,r,n)):0==s&&this.background.push(new Polygon(t,i,e,h,o,r,n)),1==this.initialized&&(1==s?(this.initPolygonBuffer(this.foreground,this.foreground.length-1),this.assignTextureIndices(this.foreground,this.foreground.length-1)):(this.initPolygonBuffer(this.background,this.background.length-1),this.assignTextureIndices(this.background,this.background.length-1)))},this.createCustomPolygon=function(t,i,e,r,s,h){null==h&&(h=!1);for(var o=[],n=0;n<r.length;n++)o.push({x:t+r[n].x,y:i+r[n].y});1==h?this.foreground.push(new Polygon(t,i,e,r,o,s)):0==h&&this.background.push(new Polygon(t,i,e,r,o,s)),1==this.initialized&&(1==h?(this.initPolygonBuffer(this.foreground,this.foreground.length-1),this.assignTextureIndices(this.foreground,this.foreground.length-1)):(this.initPolygonBuffer(this.background,this.background.length-1),this.assignTextureIndices(this.background,this.background.length-1)))},this.getForeground=function(t){return t>=this.foreground.length?void console.log("Error: Cannot get foreground object with index: "+t+". The maximum possible index is: "+(this.foreground.length-1)):this.foreground[t]},this.removeForeground=function(t){t>=this.foreground.length?console.log("Error: Cannot remove foreground object with index: "+t+". The maximum possible index is: "+(this.foreground.length-1)):this.foreground[t].dontRender=!0},this.getBackground=function(t){return t>=this.background.length?void console.log("Error: Cannot get background object with index: "+t+". The maximum possible index is: "+(this.background.length-1)):this.background[t]},this.setAmbientLight=function(t,i,e,r){this.ambientLight={r:t,g:i,b:e,a:r}},this.createPointLight=function(t,i){this.lights.push(new Light(t,i,0,"point",this.lightColour.r,this.lightColour.g,this.lightColour.b,this.lightIntensity)),1==this.initialized&&this.initLightBuffer(this.lights,this.lights.length-1)},this.createSpotLight=function(t,i,e){this.lights.push(new Light(t,i,0,"spot",this.lightColour.r,this.lightColour.g,this.lightColour.b,this.lightIntensity,e)),1==this.initialized&&this.initLightBuffer(this.lights,this.lights.length-1)},this.createDirectionalLight=function(t,i,e,r){this.lights.push(new Light(t,i,e,"directional",this.lightColour.r,this.lightColour.g,this.lightColour.b,this.lightIntensity,null,r)),1==this.initialized&&this.initLightBuffer(this.lights,this.lights.length-1)},this.removeLight=function(t){t>=this.lights.length?console.log("Error: Cannot remove light with index: "+t+". The maximum possible index is: "+(this.lights.length-1)):this.lights.splice(t,1)},this.getLight=function(t){return t>=this.lights.length?void console.log("Error: Cannot get light with index: "+t+". The maximum possible index is: "+(this.lights.length-1)):this.lights[t]},this.setLightColour=function(t,i,e){this.lightColour={r:t,g:i,b:e}},this.setLightIntensity=function(t){0>t?console.log("Error: Cannot set light intensity bellow '0'."):this.lightIntensity=t},this.setupColourSpectrum=function(){for(var t=255,i=t,e=0,r=0,e=0;t>=e;e++)this.colourSpectrum.push(colour={r:i,g:e,b:r});for(var i=t;i>=0;i--)this.colourSpectrum.push(colour={r:i,g:e,b:r});for(var r=0;t>=r;r++,e--)this.colourSpectrum.push(colour={r:i,g:e,b:r});for(var s=0;t>=s;s++,r--,i++)this.colourSpectrum.push(colour={r:i,g:e,b:r})},this.incrementColourSpectrum=function(t){null==t?this.colourIndex++:this.colourIndex+=t,this.colourIndex>this.colourSpectrum.length-1&&(this.colourIndex=0),this.setLightColour(this.colourSpectrum[this.colourIndex].r,this.colourSpectrum[this.colourIndex].g,this.colourSpectrum[this.colourIndex].b)},this.decrementColourSpectrum=function(t){null==t?this.colourIndex--:this.colourIndex-=t,this.colourIndex<0&&(this.colourIndex=this.colourSpectrum.length-1),this.setLightColour(this.colourSpectrum[this.colourIndex].r,this.colourSpectrum[this.colourIndex].g,this.colourSpectrum[this.colourIndex].b)},this.checkPointCollision=function(t,i,e){for(var r=e.shadowVertices.length,s=[],h=[],o=0;r>o;o++)s.push(e.shadowVertices[o].x),h.push(e.shadowVertices[o].y);var n=polygonCollision(r,s,h,t,i);return 1==n?!0:!1},this.setForegroundBlending=function(t){this.foregroundBlending=t},this.logFps=function(t){this.logFPS=t},this.togglePointLightShader=function(t){this.pointLightShaderSelected=t},this.convertToMatrix=function(t,i){return this.convertCallsPerFrame++,1==i?t/this.gl.viewportWidth*this.gl.viewportRatio*2:t/this.gl.viewportHeight*2},this.convertVertToMatrix=function(t,i){return this.convertCallsPerFrame++,verts={x:t/this.gl.viewportWidth*this.gl.viewportRatio*2,y:i/this.gl.viewportHeight*2}},this.getShaderFromHTML=function(t,i){var e=document.getElementById(i);if(!e)return null;for(var r="",s=e.firstChild;s;)3==s.nodeType&&(r+=s.textContent),s=s.nextSibling;var h;if("x-shader/x-fragment"==e.type)h=this.gl.createShader(this.gl.FRAGMENT_SHADER);else{if("x-shader/x-vertex"!=e.type)return null;h=this.gl.createShader(this.gl.VERTEX_SHADER)}return this.gl.shaderSource(h,r),this.gl.compileShader(h),this.gl.getShaderParameter(h,this.gl.COMPILE_STATUS)?h:(alert(this.gl.getShaderInfoLog(h)),null)},this.getShaderFromVar=function(t,i,e){var r;if("Vert"==e||"Vertex"==e||"VertexShader"==e)r=this.gl.createShader(t.VERTEX_SHADER);else{if("Frag"!=e&&"Fragment"!=e&&"FragmentShader"!=e)return void console.log("Error: Cannot get shader. Invalid type provided.");r=this.gl.createShader(t.FRAGMENT_SHADER)}return this.gl.shaderSource(r,i),this.gl.compileShader(r),this.gl.getShaderParameter(r,this.gl.COMPILE_STATUS)?r:(alert(this.gl.getShaderInfoLog(r)),null)},this.createShader=function(t,i,e,r){return t=this.gl.createProgram(),this.gl.attachShader(t,e),this.gl.attachShader(t,r),this.gl.linkProgram(t),this.gl.getProgramParameter(t,this.gl.LINK_STATUS)||alert("Could not initialise shader: "+t),this.gl.useProgram(t),1==i?this.enableTextureShaderAttribs(t):this.enableRegularShaderAttribs(t),t.pMatrixUniform=this.gl.getUniformLocation(t,"uPMatrix"),t.mvMatrixUniform=this.gl.getUniformLocation(t,"uMVMatrix"),t},this.enableRegularShaderAttribs=function(t){t.vertexPositionAttribute=this.gl.getAttribLocation(t,"aVertexPosition"),this.gl.enableVertexAttribArray(t.vertexPositionAttribute),t.vertexColorAttribute=this.gl.getAttribLocation(t,"aVertexColor"),this.gl.enableVertexAttribArray(t.vertexColorAttribute)},this.enableTextureShaderAttribs=function(t){t.vertexPositionAttribute=this.gl.getAttribLocation(t,"aVertexPosition"),this.gl.enableVertexAttribArray(t.vertexPositionAttribute),t.textureCoordAttribute=this.gl.getAttribLocation(t,"aTextureCoord"),this.gl.enableVertexAttribArray(t.textureCoordAttribute)},this.mvPushMatrix=function(){var t=mat4.create();mat4.copy(t,this.mvMatrix),this.mvMatrixStack.push(t)},this.mvPopMatrix=function(){if(0==this.mvMatrixStack.length)throw"Invalid popMatrix!";this.mvMatrix=this.mvMatrixStack.pop()},this.resize=function(i,e){(i!=t.width||e!=t.height)&&(t.width=i,t.height=e,mat4.translate(this.mvMatrix,this.mvMatrix,[+this.gl.viewportRatio,1,0]),this.gl.viewportWidth=i,this.gl.viewportHeight=e,this.gl.viewportRatio=i/e,this.gl.viewport(0,0,this.gl.viewportWidth,this.gl.viewportHeight),mat4.ortho(this.pMatrix,-this.gl.viewportRatio,this.gl.viewportRatio,-1,1,.1,100),mat4.translate(this.mvMatrix,this.mvMatrix,[-this.gl.viewportRatio,-1,0]),this.initBuffers())}}function degToRad(t){return t*Math.PI/180}function polygonCollision(t,i,e,r,s){for(var h,o,n=0,h=0,o=t-1;t>h;o=h++)e[h]>s!=e[o]>s&&r<(i[o]-i[h])*(s-e[h])/(e[o]-e[h])+i[h]&&(n=!n);return n}function checkScreenBounds(t,i,e,r,s,h,o,n){return o>=t-s&&t+e+s>=o&&n>=i-h&&i+r+h>=n?!0:!1}var pointLightFragShader="precision mediump float;uniform vec2 lightLocation;uniform vec3 lightColor;uniform float screenHeight;void main() {float distance = length(lightLocation - gl_FragCoord.xy);float attenuation = 1.0 / distance;vec4 color = vec4(attenuation, attenuation, attenuation, pow(attenuation, 3.0)) * vec4(lightColor, 1);gl_FragColor = color;}",pointLightFragShader2="precision mediump float;uniform vec2 lightLocation;uniform vec3 lightColor;uniform float screenHeight;void main() {float distance = length(lightLocation - gl_FragCoord.xy);float attenuation = 1.0 / (1.0 + 0.1*distance + 0.01*distance*distance);vec4 color = vec4(attenuation, attenuation, attenuation, pow(attenuation, 3.0)) * vec4(lightColor, 1);gl_FragColor = color;}",mainVertShader="attribute vec3 aVertexPosition;attribute vec4 aVertexColor;uniform mat4 uMVMatrix;uniform mat4 uPMatrix;varying vec4 vColor;void main(void) {gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);vColor = aVertexColor;}",spotLightFragShader="precision mediump float;uniform vec2 lightLocation;uniform vec3 lightColor;uniform float radius;uniform float screenHeight;void main() {float distance  = length( lightLocation - gl_FragCoord.xy );float intensity = 1.0 - min( distance, radius ) / radius;gl_FragColor = vec4(intensity, intensity, intensity, 0.1) * vec4(lightColor.r / 10.0, lightColor.g / 10.0, lightColor.b / 10.0, 1);}",colourFragShader="precision mediump float;uniform vec4 ambientLight;varying vec4 vColor;void main(void) {gl_FragColor = ambientLight * vColor;}",textureFragShader="precision mediump float;varying vec2 vTextureCoord;uniform vec4 ambientLight;uniform sampler2D uSampler;void main(void) {gl_FragColor = ambientLight * texture2D(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));}",textureVertShader="attribute vec3 aVertexPosition;attribute vec2 aTextureCoord;uniform mat4 uMVMatrix;uniform mat4 uPMatrix;varying vec2 vTextureCoord;void main(void) {gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);vTextureCoord = aTextureCoord;}",Vector2f={sub:function(t,i){var e={x:t.x-i.x,y:t.y-i.y};
return e},add:function(t,i){var e={x:t.x+i.x,y:t.y+i.y};return e},dot:function(t,i){return t.x*i.x+t.y*i.y},equal:function(t,i){return t.x==i.x&&t.y==i.y?!0:!1}};